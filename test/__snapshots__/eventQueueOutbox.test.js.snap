// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`event-queue outbox monkeyPatchCAPOutbox=true accept event-queue specific options in headers 1`] = `
{
  "_fromSend": true,
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true custom options should win over service options 1`] = `
{
  "_appInstancesMap": null,
  "_appNameMap": null,
  "appInstances": undefined,
  "appNames": undefined,
  "checkForNextChunk": undefined,
  "deleteFinishedEventsAfterDays": undefined,
  "eventOutdatedCheck": undefined,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": undefined,
  "internalEvent": true,
  "load": 1,
  "multiInstanceProcessing": undefined,
  "parallelEventProcessing": 5,
  "priority": undefined,
  "processAfterCommit": undefined,
  "retryAttempts": 20,
  "retryFailedAfter": undefined,
  "selectMaxChunkSize": 100,
  "subType": "NotificationServiceOutboxedByConfig",
  "transactionMode": "alwaysCommit",
  "type": "CAP_OUTBOX",
  "useEventQueueUser": undefined,
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true error in srv.after 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: sendFiori error],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req error should be caught for emit 1`] = `
[
  [
    "error processing outboxed service call",
    [TypeError: req.error is not a function],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req error should be caught for send 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: error occured],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req reject should be caught for send 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: error occured],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req reject should cause an error for emit 1`] = `
[
  [
    "error processing outboxed service call",
    [TypeError: req.reject is not a function],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for emit 1`] = `
{
  "_fromSend": true,
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for sent 1`] = `
{
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true return open event types 1`] = `
[
  {
    "subType": "DELETE_EVENTS",
    "type": "EVENT_QUEUE_BASE_PERIODIC",
  },
  {
    "subType": "DB",
    "type": "HealthCheck_PERIODIC",
  },
  {
    "subType": "Task",
    "type": "Notifications",
  },
  {
    "subType": "everyFiveMin",
    "type": "TimeSpecificEveryFiveMin_PERIODIC",
  },
  {
    "subType": "cron",
    "type": "TimeSpecificEveryMin_PERIODIC",
  },
  {
    "subType": "NotificationService",
    "type": "CAP_OUTBOX",
  },
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true should store correct user of original context 1`] = `
{
  "_fromSend": true,
  "contextUser": "badman",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;
