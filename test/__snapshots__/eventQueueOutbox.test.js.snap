// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`event-queue outbox monkeyPatchCAPOutbox=true accept event-queue specific options in headers 1`] = `
{
  "_fromSend": true,
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true ad-hoc events overwrite settings via outbox.events should create specific config during select 1`] = `
[
  "No Implementation found in the provided configuration file.",
  {
    "eventSubType": "NotificationServicePeriodic.action",
    "eventType": "CAP_OUTBOX",
  },
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true ad-hoc events overwrite settings via outbox.events specific ad-hoc event should create own config 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": false,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "inheritTraceContext": true,
  "internalEvent": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "kind": "persistent-outbox",
  "load": 60,
  "parallelEventProcessing": 5,
  "priority": "medium",
  "retryAttempts": 20,
  "selectMaxChunkSize": 100,
  "subType": "NotificationServicePeriodic.action",
  "transactionMode": "isolated",
  "type": "CAP_OUTBOX",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true ad-hoc events overwrite settings via outbox.events unchanged parameter from the generic config should remain the same for the specific event 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": false,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "inheritTraceContext": true,
  "internalEvent": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "kind": "persistent-outbox",
  "load": 60,
  "parallelEventProcessing": 5,
  "priority": "medium",
  "retryAttempts": 20,
  "selectMaxChunkSize": 100,
  "subType": "NotificationServicePeriodic.action",
  "transactionMode": "isolated",
  "type": "CAP_OUTBOX",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true custom options should win over service options 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "inheritTraceContext": true,
  "internalEvent": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "kind": "persistent-outbox",
  "load": 1,
  "parallelEventProcessing": 5,
  "priority": "medium",
  "retryAttempts": 20,
  "selectMaxChunkSize": 100,
  "subType": "NotificationServiceOutboxedByConfig",
  "transactionMode": "alwaysCommit",
  "type": "CAP_OUTBOX",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true error in srv.after 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: sendFiori error],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true map config to event-queue config 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "inheritTraceContext": true,
  "internalEvent": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "kind": "persistent-outbox",
  "load": 1,
  "parallelEventProcessing": 5,
  "priority": "medium",
  "retryAttempts": 20,
  "selectMaxChunkSize": 100,
  "subType": "NotificationService",
  "type": "CAP_OUTBOX",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true option to use eventQueue.userId in outboxed services 1`] = `
{
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "subType": "NotificationServiceOutboxedByConfigUserId",
  "user": "dummyTestUser",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true periodic events inherit config cron/interval on top level is not allowed 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "cron": "*/15 * * * * *",
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "internalEvent": true,
  "isPeriodic": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "load": 60,
  "priority": "medium",
  "subType": "NotificationServicePeriodic.main",
  "transactionMode": "isolated",
  "type": "CAP_OUTBOX_PERIODIC",
  "tz": "UTC",
  "useCronTimezone": false,
  "utc": false,
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true periodic events inherit config cron/interval on top level is not allowed 2`] = `
[
  "The properties interval|cron must be defined in the event section and will be ignored in the outbox section.",
  {
    "serviceName": "NotificationServicePeriodic",
  },
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true periodic events inherit config overwrite in specific section 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "cron": "*/15 * * * * *",
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "internalEvent": true,
  "isPeriodic": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "load": 60,
  "priority": "medium",
  "subType": "NotificationServicePeriodic.main",
  "transactionMode": "alwaysRollback",
  "type": "CAP_OUTBOX_PERIODIC",
  "tz": "UTC",
  "useCronTimezone": false,
  "utc": false,
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true periodic events inherit config simple push down 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "cron": "*/15 * * * * *",
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "internalEvent": true,
  "isPeriodic": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "load": 60,
  "priority": "medium",
  "subType": "NotificationServicePeriodic.main",
  "transactionMode": "isolated",
  "type": "CAP_OUTBOX_PERIODIC",
  "tz": "UTC",
  "useCronTimezone": false,
  "utc": false,
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true periodic events insert periodic event for CAP service 1`] = `
{
  "attempts": 0,
  "status": 0,
  "subType": "NotificationServicePeriodic.main",
  "type": "CAP_OUTBOX_PERIODIC",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req error should be caught for emit 1`] = `
[
  [
    "error processing outboxed service call",
    [TypeError: req.error is not a function],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req error should be caught for send 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: error occured],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req reject should be caught for send 1`] = `
[
  [
    "error processing outboxed service call",
    [Error: error occured],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req reject should cause an error for emit 1`] = `
[
  [
    "error processing outboxed service call",
    [TypeError: req.reject is not a function],
    {
      "serviceName": "NotificationService",
    },
  ],
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for emit 1`] = `
{
  "_fromSend": true,
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for emit 2`] = `
{
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "subType": "NotificationService",
  "user": "testUser",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for sent 1`] = `
{
  "contextUser": "testUser",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true req.data should be stored for sent 2`] = `
{
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "subType": "NotificationService",
  "user": "testUser",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true return open event types 1`] = `
[
  {
    "subType": "NotificationServicePeriodic.main",
    "type": "CAP_OUTBOX_PERIODIC",
  },
  {
    "subType": "NotificationServicePeriodic.randomOffset",
    "type": "CAP_OUTBOX_PERIODIC",
  },
  {
    "subType": "NotificationService",
    "type": "CAP_OUTBOX",
  },
]
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true should store correct user of original context 1`] = `
{
  "_fromSend": true,
  "contextUser": "badman",
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "event": "sendFiori",
  "headers": {},
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true should store correct user of original context 2`] = `
{
  "data": {
    "body": "body",
    "subject": "subject",
    "to": "to",
  },
  "subType": "NotificationService",
  "user": "badman",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true should work for outboxed services by require with transactionMode config 1`] = `
{
  "_appInstancesMap": null,
  "_appNameContainsRegex": null,
  "_appNameMap": null,
  "checkForNextChunk": true,
  "impl": "./outbox/EventQueueGenericOutboxHandler",
  "increasePriorityOverTime": true,
  "inheritTraceContext": true,
  "internalEvent": true,
  "keepAliveInterval": 60,
  "keepAliveMaxInProgressTime": 210,
  "kind": "persistent-outbox",
  "load": 1,
  "parallelEventProcessing": 5,
  "priority": "medium",
  "retryAttempts": 20,
  "selectMaxChunkSize": 100,
  "subType": "NotificationServiceOutboxedByConfig",
  "transactionMode": "alwaysRollback",
  "type": "CAP_OUTBOX",
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true trace context should extract current trace context and save 1`] = `
{
  "traceContext": {
    "traceparent": "00-ac46cd732064b44a9c692c2062db8fbd-5fa4a29b5675b3c3-01",
  },
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true trace context should not use stored trace context if disabled by config 1`] = `
{
  "traceContext": {
    "traceparent": "00-ac46cd732064b44a9c692c2062db8fbd-5fa4a29b5675b3c3-01",
  },
}
`;

exports[`event-queue outbox monkeyPatchCAPOutbox=true trace context should use stored trace context in next processing 1`] = `
{
  "traceContext": {
    "traceparent": "00-ac46cd732064b44a9c692c2062db8fbd-5fa4a29b5675b3c3-01",
  },
}
`;
